name: Home Server
on:
  push:
    branches:
      - master

jobs:
  dependencies:
    name: dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/dashboard/package-lock.json') }}
          path: dashboard/node_modules/
      - uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - run: npm ci
        working-directory: dashboard

  test:
    name: test
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/dashboard/package-lock.json') }}
          path: dashboard/node_modules/
      - uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - run: npm run test -- --watchAll=false --passWithNoTests
        working-directory: dashboard

  build:
    name: build
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/dashboard/package-lock.json') }}
          path: dashboard/node_modules/
      - uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - run: npm run build
        working-directory: dashboard
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: dashboard/build

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dashboard/build
      - name: Publish image
        working-directory: dashboard
        run: |
          echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          IMAGE=ghcr.io/$GITHUB_REPOSITORY/dashboard:latest
          docker build . --tag $IMAGE
          docker push $IMAGE

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - uses: actions/checkout@v2
      - name: Setup kubectl
        env:
          KUBECTL_VER: 1.19.3
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s 4.0.4
          sudo mv kustomize /usr/local/bin/kustomize
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
          chmod 0600 ~/.kube/config
      - name: Deploy server
        working-directory: k8s
        run: |
          kubectl rollout restart deployment dashboard -n server
          kustomize build crds | kubectl apply -f -
          sleep 5
          kustomize build server | kubectl apply -f -
          sleep 5
          kustomize build | kubectl apply -f - --prune -l prune=true
